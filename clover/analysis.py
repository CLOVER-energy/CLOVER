#!/usr/bin/python3
########################################################################################
# analysis.py - In-built analysis module for CLOVER.                                   #
#                                                                                      #
# Author: Ben Winchester                                                               #
# Copyright: Ben Winchester, 2021                                                      #
# Date created: 13/07/2021                                                             #
# License: Open source                                                                 #
########################################################################################
"""
analysis.py - The analysis module for CLOVER.

In order to best check and validate the results produced by CLOVER simulations and
optimisations, an in-built analysis module is provied which generates plots and figures
corresponding to the sugetsed analysis within the user guide.

"""

import dataclasses

from typing import Dict, Optional

import numpy as np
import pandas as pd


__all__ = ("KeyResults",)


@dataclasses.dataclass
class KeyResults:
    """
    Contains the key results from a simulation.

    .. attribute:: average_pv_generation
        The average energy generated by the PV set up per day, measured in kWh/day.

    .. attribute:: cumulative_pv_generation
        The total electric power that was generated by the PV installation over its
        lifetime, measured in kWh.

    """

    average_pv_generation: Optional[float] = None
    cumulative_pv_generation: Optional[float] = None

    def to_dict(self) -> Dict[str, float]:
        """
        Returns the :class:`KeyResults` information as a `dict` ready for saving.

        Outputs:
            - A `dict` containing the information stored in the :class:`KeyResult`
              instance.

        """

        data_dict: Dict[str, float] = dict()
        if self.average_pv_generation is not None:
            data_dict["Average pv generation / kWh/day"] = self.average_pv_generation
        if self.cumulative_pv_generation is not None:
            data_dict["Cumulative pv generation / kWh"] = self.cumulative_pv_generation

        return data_dict


def get_key_results(total_solar_output: pd.DataFrame) -> KeyResults:
    """
    Computes the key results of the simulation.

    Inputs:
        - total_solar_output:
            The total solar power produced by the PV installation.

    Outputs:
        - key_results:
            The key results of the simulation, wrapped in a :class:`KeyResults`
            instance.

    """

    key_results = KeyResults()

    # Compute the solar-generation results.
    total_solar_generation: float = np.round(np.sum(total_solar_output))
    key_results.cumulative_pv_generation = float(total_solar_generation)
    key_results.average_pv_generation = float(
        round(total_solar_generation / (20 * 365))
    )

    return key_results


def plot_outputs(total_solar_output: pd.DataFrame) -> None:
    """
    Plots all the outputs given below.

    NOTE: To add an output to be plotted, simply add to this function.

    Inputs:
        - total_solar_output:
            The total solar power produced by the PV installation.

    """
