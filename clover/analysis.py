#!/usr/bin/python3
########################################################################################
# analysis.py - In-built analysis module for CLOVER.                                   #
#                                                                                      #
# Author: Ben Winchester                                                               #
# Copyright: Ben Winchester, 2021                                                      #
# Date created: 13/07/2021                                                             #
# License: Open source                                                                 #
########################################################################################
"""
analysis.py - The analysis module for CLOVER.

In order to best check and validate the results produced by CLOVER simulations and
optimisations, an in-built analysis module is provied which generates plots and figures
corresponding to the sugetsed analysis within the user guide.

"""

import dataclasses
import matplotlib.pyplot as plt
import os

from typing import Dict, Optional

import numpy as np
import pandas as pd
import seaborn as sns


__all__ = (
    "KeyResults",
    "get_key_results",
    "plot_outputs",
)


# Colour map:
#   The preferred sns colourmap to use.
COLOUR_MAP = "Blues"

# Hours per year:
#   The number of hours in a year, used for reshaping arrays.
HOURS_PER_YEAR = 8760

# Plot resolution:
#   The resolution, in dpi, to use for plotting figures.
PLOT_RESOLUTION = 300


@dataclasses.dataclass
class KeyResults:
    """
    Contains the key results from a simulation.

    .. attribute:: average_pv_generation
        The average energy generated by the PV set up per day, measured in kWh/day.

    .. attribute:: cumulative_pv_generation
        The total electric power that was generated by the PV installation over its
        lifetime, measured in kWh.

    .. attribute:: grid_daily_hours
        The average number of hours per day for which the grid is available.

    """

    average_pv_generation: Optional[float] = None
    cumulative_pv_generation: Optional[float] = None
    grid_daily_hours: Optional[float] = None

    def to_dict(self) -> Dict[str, float]:
        """
        Returns the :class:`KeyResults` information as a `dict` ready for saving.

        Outputs:
            - A `dict` containing the information stored in the :class:`KeyResult`
              instance.

        """

        data_dict: Dict[str, float] = dict()
        if self.average_pv_generation is not None:
            data_dict["Average pv generation / kWh/day"] = self.average_pv_generation
        if self.cumulative_pv_generation is not None:
            data_dict["Cumulative pv generation / kWh"] = self.cumulative_pv_generation
        if self.grid_daily_hours is not None:
            data_dict["Average grid availability / hours/day"] = self.grid_daily_hours

        return data_dict


def get_key_results(
    grid_input_profile: pd.DataFrame, total_solar_output: pd.DataFrame
) -> KeyResults:
    """
    Computes the key results of the simulation.

    Inputs:
        - grid_input_profile:
            The relevant grid input profile for the simulation that was run.
        - total_solar_output:
            The total solar power produced by the PV installation.

    Outputs:
        - key_results:
            The key results of the simulation, wrapped in a :class:`KeyResults`
            instance.

    """

    key_results = KeyResults()

    # Compute the solar-generation results.
    total_solar_generation: float = np.round(np.sum(total_solar_output))
    key_results.cumulative_pv_generation = float(total_solar_generation)
    key_results.average_pv_generation = float(
        round(total_solar_generation / (20 * 365))
    )

    # Compute the grid results.
    key_results.grid_daily_hours = np.sum(grid_input_profile, axis=0)

    return key_results


def plot_outputs(
    grid_input_profile: pd.DataFrame,
    grid_profile: pd.DataFrame,
    output_directory: str,
    simulation_filename: str,
    total_solar_output: pd.DataFrame,
) -> None:
    """
    Plots all the outputs given below.

    NOTE: To add an output to be plotted, simply add to this function.

    Inputs:
        - grid_input_profile:
            The relevant grid input profile for the simulation that was run.
        - grid_profile:
            The relevant grid profile for the simulation that was run.
        - output_directory:
            The directory into which to save the output information.
        - simulation_filename:
            The filename used when saving the simulation.
        - total_solar_output:
            The total solar power produced by the PV installation.

    """

    # Create an output directory for the various plots to be saved in.
    figures_directory = os.path.join(output_directory, simulation_filename)
    os.makedirs(figures_directory, exist_ok=True)

    # Plot the first year of solar generation as a heatmap.
    rehaped_data = np.reshape(
        total_solar_output.iloc[0:HOURS_PER_YEAR].values, (365, 24)
    )
    heatmap = sns.heatmap(
        rehaped_data,
        vmin=0,
        vmax=1,
        cmap=COLOUR_MAP,
        cbar_kws={"label": "Power output / kW"},
    )
    heatmap.set(
        xticks=range(0, 24, 2),
        xticklabels=range(0, 24, 2),
        yticks=range(0, 365, 30),
        yticklabels=range(0, 365, 30),
        xlabel="Hour of day",
        ylabel="Day of year",
        title="Output per kWp of solar capacity",
    )
    plt.xticks(rotation=0)
    plt.tight_layout()
    plt.savefig(
        os.path.join(figures_directory, "solar_output_hetamap.png"), transparent=True
    )
    plt.close()

    # Plot the yearly power generated by the solar system.
    solar_daily_sums = pd.DataFrame(np.sum(rehaped_data, axis=1))
    plt.plot(range(365), solar_daily_sums[0])
    plt.xticks(range(0, 365, 30))
    plt.yticks(range(0, 9, 2))
    plt.xlabel("Day of year")
    plt.ylabel("Energy generation / kWh per day")
    plt.title("Daily energy generation of 1 kWp of solar capacity")
    plt.savefig(
        os.path.join(figures_directory, "solar_output_yearly.png"), transparent=True
    )
    plt.close()

    # Plot the grid availablity profile.
    rehaped_data = np.reshape(grid_profile.iloc[0:HOURS_PER_YEAR].values, (365, 24))
    heatmap = sns.heatmap(rehaped_data, vmin=0, vmax=1, cmap="Greys_r", cbar=False)
    heatmap.set(
        xticks=range(0, 24, 2),
        xticklabels=range(0, 24, 2),
        yticks=range(0, 365, 30),
        yticklabels=range(0, 365, 30),
        xlabel="Hour of day",
        ylabel="Day of year",
        title="Grid availability of the selected profile.",
    )
    plt.xticks(rotation=0)
    plt.tight_layout()
    plt.savefig(
        os.path.join(figures_directory, "grid_availability_heatmap.png"),
        transparent=True,
    )
    plt.close()

    # Plot the input vs. randomised grid avialability profiles.
    plt.plot(range(24), grid_input_profile, color="k", label="Input")
    plt.plot(range(24), np.mean(rehaped_data, axis=0), color="r", label="Output")
    plt.legend()
    plt.xticks(range(0, 24, 2))
    plt.yticks(np.arange(0, 1.1, 0.2))
    plt.xlabel("Hour of day")
    plt.ylabel("Probability")
    plt.title("Probability of grid electricity being available")
    plt.savefig(
        os.path.join(
            figures_directory, "grid_availability_randomisation_comparison.png"
        ),
        transparent=True,
    )
    plt.close()
